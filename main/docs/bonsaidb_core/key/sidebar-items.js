window.SIDEBAR_ITEMS = {"derive":[["Key","Derives the `bonsaidb::core::key::Key` trait."]],"enum":[["NextValueError","The error types for [`Key::next_value()`]."]],"fn":[["decode_composite_field","Decodes a value previously encoded using [`encode_composite_field()`]. The result is a tuple with the first element being the decoded value, and the second element is the remainig byte slice."],["encode_composite_field","Encodes a value using the `Key` trait in such a way that multiple values can still be ordered at the byte level when chained together."]],"mod":[["time","[`Key`] implementations for time types."]],"struct":[["CompositeKeyDecoder","Decodes multiple [`Key`] values from a byte slice previously encoded with [`CompositeKeyEncoder`]."],["CompositeKeyEncoder","Encodes multiple [`KeyEncoding`] implementors into a single byte buffer, preserving the ordering guarantees necessary for [`Key`]."],["CompositeKeyError","An error occurred inside of one of the composite key fields."],["CompositeKeyFieldContainsNullByte","Null bytes in variable fields encoded with [`CompositeKeyEncoder`] can cause sort order to misbehave."],["EnumKey","Adds `Key` support to an enum. Requires implementing `ToPrimitive` and `FromPrimitive`, or using a crate like num-derive to do it automatically. Take care when using enums as keys: if the order changes or if the meaning of existing numerical values changes, make sure to update any related viewsâ€™ version number to ensure the values are re-evaluated."],["IncorrectByteLength","An error that indicates an unexpected number of bytes were present."],["OptionKeyV1","A type that preserves the original implementation of [`Key`] for `Option<T>`. This should not be used in new code and will be removed in a future version."],["TupleEncodingV1","This type enables wrapping a tuple to preserve the behavior of the initial implementation of tuple key encoding. This type should not be used in new code and should only be used to preserve backwards compatibility. See https://github.com/khonsulabs/bonsaidb/issues/240 for more information about why this implementation should be avoided."],["UnknownEnumVariant","An error that indicates an unexpected enum variant value was found."]],"trait":[["IntoPrefixRange","A type that can be used as a prefix range in range-based queries."],["Key","A trait that enables a type to convert itself into a `memcmp`-compatible sequence of bytes."],["KeyEncoding","A trait that enables a type to convert itself into a `memcmp`-compatible sequence of bytes."]]};