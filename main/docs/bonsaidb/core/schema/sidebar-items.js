window.SIDEBAR_ITEMS = {"derive":[["Collection","Derives the `bonsaidb::core::schema::Collection` trait. `#[collection(authority = \"Authority\", name = \"Name\", views = [a, b, c])]`"],["Schema","Derives the `bonsaidb::core::schema::Schema` trait. `#[schema(name = \"Name\", authority = \"Authority\", collections = [A, B, C]), core = bonsaidb::core]` `authority`, `collections` and `core` are optional"],["View","Derives the `bonsaidb::core::schema::View` trait. `#[view(collection=CollectionType, key=KeyType, value=ValueType, name = \"by-name\")]` `name` and `value` are optional"]],"enum":[["NamedReference","A reference to a collection that has a unique name view."]],"mod":[["view","Types for defining map/reduce-powered `View`s."]],"struct":[["AsyncEntry","A future that resolves to an entry in a [`NamedCollection`]."],["AsyncList","Retrieves a list of documents from a collection, when awaited. This structure also offers functions to customize the options for the operation."],["Authority","The owner of a schema item. This should represent the company, group, or individual that created the item in question. This value is used for namespacing. Changing this after values are in use is not supported without manual migrations at this time."],["CollectionName","The namespaced name of a `Collection`."],["InsertError","An error from inserting a [`CollectionDocument`]."],["InvalidNameError","A name was unable to e parsed."],["List","Retrieves a list of documents from a collection. This structure also offers functions to customize the options for the operation."],["Map","A document’s entry in a View’s mappings."],["MappedValue","A key value pair"],["Name","A schema name. Cloning is inexpensive."],["QualifiedName","A namespaced name."],["SchemaName","The name of a `Schema`."],["Schematic","A collection of defined collections and views."],["ViewName","The name of a `View`."]],"trait":[["Collection","A namespaced collection of `Document<Self>` items and views."],["CollectionViewSchema","A [`View`] for a [`Collection`] that stores Serde-compatible documents. The only difference between implmementing this and [`View`] is that the `map` function receives a [`CollectionDocument`] instead of a [`BorrowedDocument`]."],["DefaultSerialization","A convenience trait for easily storing Serde-compatible types in documents."],["DefaultViewSerialization","A default serialization strategy for views. Uses equivalent settings as `DefaultSerialization`."],["Nameable","A type that can be used as a unique reference for a collection that implements [`NamedCollection`]."],["NamedCollection","A collection with a unique name column."],["Qualified","Functions for creating qualified names"],["Schema","Defines a group of collections that are stored into a single database."],["SerializedCollection","A collection that knows how to serialize and deserialize documents to an associated type."],["SerializedView","A [`View`] with additional tyes and logic to handle serializing view values."],["View","An lazy index of mapped and/or reduced data from a [`Collection`]."],["ViewSchema","The implementation of Map/Reduce for a [`View`]."]],"type":[["ReduceResult","A type alias for the result of `ViewSchema::reduce()`."],["ViewMapResult","A type alias for the result of `ViewSchema::map()`."],["ViewMappedValue","A mapped value in a [`View`]."]]};