window.SIDEBAR_ITEMS = {"enum":[["AccessPolicy","Changes how the view’s outdated data will be treated."],["Authentication","Authentication methods."],["AuthenticationMethod","Methods for authentication."],["Bound","A range bound that can be serialized."],["BoundRef","A range bound reference."],["Identity","An identity from the connected BonsaiDb instance."],["IdentityId","An identity from the connected BonsaiDb instance."],["IdentityReference","A reference to an identity."],["MaybeOwned","A value that may be owned or not. Similar to [`std::borrow::Cow`] but does not require `Clone`."],["QueryKey","Filters a [`View`] by key."],["SerializedQueryKey","A [`QueryKey`] that has had its keys serialized."],["SessionAuthentication","The authentication state of a [`Session`]."],["Sort","A sort order."],["TokenChallengeAlgorithm","A token challenge algorith designates with which algorthm to authenticate tokens."]],"struct":[["AsyncCollection","Interacts with a collection over a `Connection`."],["AsyncList","Retrieves a list of documents from a collection, when awaited. This structure also offers functions to customize the options for the operation."],["AsyncView","Parameters to query a [`schema::View`]."],["Collection","Interacts with a collection over a `Connection`."],["Database","A database stored in BonsaiDb."],["List","Retrieves a list of documents from a collection. This structure also offers functions to customize the options for the operation."],["Range","A range type that can represent all `std` range types and be serialized."],["RangeRef","A range reference type that can be serialized."],["SensitiveBytes","A buffer containing sensitive (private) data. This struct automatically overwrites its contents with zeroes when dropped."],["SensitiveString","A string containing sensitive (private) data. This struct automatically overwrites its contents with zeroes when dropped."],["Session","The authentication state for a [`StorageConnection`]."],["SessionId","A unique session ID."],["View","Parameters to query a [`schema::View`]."]],"trait":[["AsyncConnection","A connection to a database’s `Schema`, giving access to `Collection`s and `Views`s. All functions on this trait are safe to use in an asynchronous context."],["AsyncLowLevelConnection","The low-level interface to a database’s [`schema::Schema`], giving access to `Collection`s and `Views`s. This trait is for use within async contexts. For access outside of async contexts, use [`LowLevelConnection`]."],["AsyncStorageConnection","Functions for interacting with a multi-database BonsaiDb instance."],["Connection","A connection to a database’s `Schema`, giving access to `Collection`s and `Views`s. This trait is not safe to use within async contexts and will block the current thread. For async access, use [`AsyncConnection`]."],["HasSchema","Access to a connection’s schema."],["HasSession","Functions to access information about the current session (authentication)."],["LowLevelConnection","The low-level interface to a database’s [`schema::Schema`], giving access to `Collection`s and `Views`s. This trait is not safe to use within async contexts and will block the current thread. For async access, use [`AsyncLowLevelConnection`]."],["StorageConnection","Functions for interacting with a multi-database BonsaiDb instance."]],"type":[["GroupedReductions","This type is the result of `reduce_grouped()`. It is a list of all matching keys and the reduced value of all mapped entries for that key."],["ViewMappings","This type is the result of `query()`. It is a list of mappings, which contains:"]]};